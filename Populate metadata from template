##this code will take a metadata template and use it to populate the gdb, feature datasets, feature classes, and nonspatial tables
##the code does not seperate field metadata based on feature class or field name

import arcpy
import os

def apply_metadata(template_path, target_path):
    """Apply the metadata template to the target item."""
    try:
        if arcpy.Exists(target_path):
            target_metadata = arcpy.metadata.Metadata(target_path)
            target_metadata.importMetadata(template_path)
            target_metadata.save()
            print(f"Metadata applied to {target_path}.")
        else:
            print(f"Target does not exist: {target_path}")
    except Exception as e:
        print(f"Failed to apply metadata to {target_path}: {e}")

# Prompt user for metadata template and geodatabase
metadata_template = input("Enter the path to the metadata template (.xml): ").strip()
geodatabase = input("Enter the path to the geodatabase (.gdb): ").strip()

# Validate inputs
if not os.path.isfile(metadata_template):
    print("The metadata template file does not exist.")
    exit()

if not arcpy.Exists(geodatabase) or not geodatabase.endswith('.gdb'):
    print("The specified geodatabase does not exist or is invalid.")
    exit()

# Apply metadata to the geodatabase
print("Applying metadata to geodatabase...")
apply_metadata(metadata_template, geodatabase)

# Process feature datasets
print("Processing feature datasets...")
arcpy.env.workspace = geodatabase
feature_datasets = arcpy.ListDatasets(feature_type="Feature")
for dataset in feature_datasets or []:
    dataset_path = os.path.join(geodatabase, dataset)
    apply_metadata(metadata_template, dataset_path)

# Process feature classes
print("Processing feature classes...")
for root, dirs, files in arcpy.da.Walk(geodatabase, datatype="FeatureClass"):
    for fc in files:
        fc_path = os.path.join(root, fc)
        apply_metadata(metadata_template, fc_path)

# Process non-spatial tables
print("Processing tables...")
tables = arcpy.ListTables()
for table in tables or []:
    table_path = os.path.join(geodatabase, table)
    apply_metadata(metadata_template, table_path)

print("Metadata population complete!")
